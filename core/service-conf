#!/bin/sh
set -e

#
# Usage: pass in a list of services to configure
# Example: service-conf serf haproxy

# add airstack helpers if they exist:
ERROR_MESSAGE_DEFAULT="[ERROR] service-conf -"
[ -f "/package/airstack/core/airstack-helpers" ] && { . /package/airstack/core/airstack-helpers ;} || { printf "missing airstack-helpers. exiting.\n" && exit 113 ;}


###
# Set up necessary service configs after running the enable var contents.
# Usage: pass in the service name in all lowercase.
###
# run the enable command for a service.
# TODO: use the "state" key in config.json
service_enable_pre() {
  set +e

  # don't do anything if blank
  [ -z "$1" ] && return 0

  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_ENABLE' | head -n1)
  chpst -e /env/$service_name/ -u root sh $cmd_name
  # error_check "failure in service_enable_pre"

  return 0
}


service_run_init() {
  set -e -x

  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_RUN' | head -n1)

  # don't do anything if blank
  [ $(cat $cmd_name | wc -m) -gt 1 ] || return 0

  BASEDIR=/etc/sv

  # create runit service dir
  [ -e $BASEDIR/$service_name/ ] || mkdir -p $BASEDIR/$service_name/

  # symlink env directory for service
  ln -s /env/"$service_name" $BASEDIR/$service_name/env

  # create runit service file
  local cmd_file; cmd_file="$BASEDIR/$service_name/run"
  echo "#!/bin/sh" > $cmd_file
  echo "exec 2>&1" >> $cmd_file
  echo "socklog-check || exit 1" >> $cmd_file
  cat "$cmd_name" >> $cmd_file

  chmod ug+x $cmd_file
  # core-error-check "service_run_init error"

  return 0
}


service_log_init() {
  set -x +e

  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_LOG' | head -n1)

  # don't do anything if blank
  [ $(cat $cmd_name | wc -m) -gt 1 ] || return 0

  BASEDIR=/etc/sv

  # create runit service log dir
  [ ! -e $BASEDIR/$service_name/log/ ] && mkdir -p $BASEDIR/$service_name/log/

  # create runit service log file
  local cmd_file; cmd_file="$BASEDIR/$service_name/log/run"
  echo "#!/bin/sh" > "$cmd_file"
  echo "exec 2>&1" >> "$cmd_file"
  cat "$cmd_name" >> "$cmd_file"

  chmod ug+x $cmd_file
  # core-error-check "log script failure"

  return 0
}


###
# Set up necessary service configs after running the enable, run and log var contents.
###
service_enable_post() {
  set +e -x

  local service_name; service_name="$1"
  echo "Enabling $service_name"

  # TODO: hook up runlevels to not hard-code this.
  [ $service_name="socklog-unix" ] && tmp_runlevels="single multi"

  local i;
  for i in ${tmp_runlevels:-multi}; do
    [ ! -e /etc/runit/runsvdir/$i/$service_name ] && ln -sv /etc/sv/$service_name /etc/runit/runsvdir/$i/
  done

  # adding to init.d for service command compatibility
  ln -sf /usr/bin/sv /etc/init.d/$service_name
  return 0
}


main() {

  for i in "$@"; do
    service_enable_pre $i
    service_run_init $i
    service_log_init $i
    service_enable_post $i
  done
}


main "$@"
