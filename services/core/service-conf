#!/bin/sh
set -e

# Usage: $1 is the main settings. $2 is the service settings.          
# example usage is: 
# service-conf /etc/airstack/core/config.json /etc/airstack/dropbear/config.json
# TODO: if the json has any missing options, it will assume defaults.

init() {
  BASEDIR="/etc/sv"
  # BASEDIR="/tmp"  
  MAIN_SETTINGS=$1
  SERVICE_SETTINGS=$2
  ( [ -z "$MAIN_SETTINGS" ] || [ -z "$SERVICE_SETTINGS" ] ) && (echo 'all params not set.' && exit 1)
  return 0
}

main_settings_load() {
  local tmp_settings
  tmp_settings=$MAIN_SETTINGS
  AIRSTACK_TAGS_NAME=$(cat $tmp_settings | jq --raw-output '.name')
  AIRSTACK_TAGS_ENV=$(cat $tmp_settings | jq --raw-output '.env')
  AIRSTACK_USER_NAME=$(cat $tmp_settings | jq --raw-output '.user[].username')
  AIRSTACK_USER_PASSWORD=$(cat $tmp_settings | jq --raw-output '.user[].password')
  AIRSTACK_USER_COMMENT=$(cat $tmp_settings | jq --raw-output '.user[].comment')
  AIRSTACK_USER_UID=$(cat $tmp_settings | jq --raw-output '.user[].uid')
  AIRSTACK_USER_GID=$(cat $tmp_settings | jq --raw-output '.user[].gid')
  AIRSTACK_USER_SHELL=$(cat $tmp_settings | jq --raw-output '.user[].shell')

  return 0
}

service_settings_load() {
  local tmp_settings
  tmp_settings=$SERVICE_SETTINGS
  SERVICE_NAME=$(cat $tmp_settings | jq --raw-output '.services | keys[]')
  SERVICE_ENABLE=$(cat $tmp_settings | jq --raw-output '.services[].enable')
  SERVICE_RUN=$(cat $tmp_settings | jq --raw-output '.services[].run')
  SERVICE_LOG=$(cat $tmp_settings | jq --raw-output '.services[].log')  
  SERVICE_CHECK=$(cat $tmp_settings | jq --raw-output '.services[].check')
  SERVICE_FINISH=$(cat $tmp_settings | jq --raw-output '.services[].finish')
  return 0
}

service_enable_pre() {
  set +e
  # eval the enable command
  eval "$SERVICE_ENABLE"

  if [ "$?" -ne 0 ]; then
    echo "$SERVICE_NAME enable script failure." >&2
    exit ${E_BAD_ENABLE}
  else printf "$SERVICE_NAME enabled\n"
  fi
  return 0
}

service_enable_post() {
  set +e
  echo "Enabling $SERVICE_NAME"
  [ -e /etc/sv/$SERVICE_NAME/run ] && chmod ug+x /etc/sv/$SERVICE_NAME/run
  [ -e /etc/sv/$SERVICE_NAME/log/run ] && chmod ug+x /etc/sv/$SERVICE_NAME/log/run

  for i in ${TMP_RUNLEVELS:-multi}; do
    [ ! -e /etc/runit/runsvdir/$i/$SERVICE_NAME ] && ln -s /etc/sv/$SERVICE_NAME /etc/runit/runsvdir/$i
  done

  # adding to init.d for service command compatibility
  ln -sf /usr/bin/sv /etc/init.d/$SERVICE_NAME
  return 0
}

service_run_init() {
  set +e

  # don't do anything if blank
  [ -z "$SERVICE_RUN" ] && return 1
  
  # create runit service dir
  [ ! -e $BASEDIR/$SERVICE_NAME/ ] && mkdir -p $BASEDIR/$SERVICE_NAME/

  # create runit service file
  echo "#!/bin/sh" > $BASEDIR/$SERVICE_NAME/run
  echo "exec 2>&1" >> $BASEDIR/$SERVICE_NAME/run
  echo $(eval "$SERVICE_RUN") >> $BASEDIR/$SERVICE_NAME/run

  if [ "$?" -ne 0 ]; then
    echo "$SERVICE_NAME run script failure.\n" >&2
    exit ${E_BAD_RUN}
  fi  

  return 0
}

service_log_init() {
  set +e
  # create runit service log dir
  [ ! -e $BASEDIR/$SERVICE_NAME/log/ ] && mkdir -p $BASEDIR/$SERVICE_NAME/log/

  # create runit service log file
  local logdir; logdir="$BASEDIR/$SERVICE_NAME/log/run"
  echo "#!/bin/sh" > "$logdir"
  echo "exec 2>&1" >> "$logdir"
  echo $(eval "echo $SERVICE_LOG") >> "$logdir"

  if [ "$?" -ne 0 ]; then
    echo "$SERVICE_NAME log script failure.\n" >&2
    exit ${E_BAD_RUN}
  fi  

  return 0
}

main() {
  init "$@"
  service_settings_load #$SERVICE_SETTINGS
  main_settings_load #$MAIN_SETTINGS
  service_enable_pre

  service_run_init
  printf "$SERVICE_NAME run is now:\n"
  printf "$(cat /etc/sv/$SERVICE_NAME/run)\n"

  service_log_init
  printf "$SERVICE_NAME log is now:\n"
  printf "$(cat /etc/sv/$SERVICE_NAME/log/run)\n"

  service_enable_post
}

main "$@"
