#!/bin/sh

# TODO use shellcheck on build to ensure we aren't using bashisms.
# switch to mksh-static for dash
# http://lowendbox.com/blog/replacing-big-fat-bash-with-dash-for-scripting/
# http://rgeissert.blogspot.com/2012/03/bash-way-is-faster-but-only-with-bash.html

# Useful helper functions for airstack shell scripts.
# Add the following block (uncommented of course) in your scripts:

## add airstack helpers if they exist:
# ERROR_MESSAGE_DEFAULT="[ERROR] CHANGEME -"
# [ -f "/package/airstack/core/airstack-helpers" ] && { . /package/airstack/core/airstack-helpers ;} || { printf "missing airstack-helpers. exiting.\n" && exit 113 ;}

## begin helper functions

msg() {
    # bold
    printf "\033[1m=> $@\033[m"
}

msg_ok() {
    # bold/green
    printf "\033[1m\033[32m OK\033[m\n"
}

msg_fail() {
    # bold/red
    printf "\033[1m\033[31m FAIL\033[m\n"
}

msg_warn() {
    # bold/yellow
    printf "\033[1m\033[33mWARNING: $@\033[m"
}

###
# Install packages
#
# usage: pkg_install PACKAGE_NAME_1 PACKAGE_NAME_2
# Examples: pkg_install haproxy
#           pkg_install openssh-server wget
#
# Refs: apt-config dump; dpkg --force-help;
#       http://www.tecmint.com/useful-basic-commands-of-apt-get-and-apt-cache-for-package-management/
###
pkg_install() {
    set -x
    echo 'debconf debconf/frontend select Noninteractive' | debconf-set-selections
    apt-get update; apt-get install -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold --no-install-recommends --no-install-suggests -y "$@"
    set +x
}

###
# Install packages in parallel.
#
# aria2 is a lightweight multi-protocol & multi-source,
# cross platform download utility operated in command-line.
# It supports HTTP/HTTPS, FTP, BitTorrent and Metalink.
#
# Refs: https://github.com/tatsuhiro-t/aria2
#       http://ubuntuforums.org/showthread.php?t=1493421
###

pkg_install_fast() {
  apt-get -y --print-uris -qq upgrade|awk '
      BEGIN {
        print "<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
        print "<metalink xmlns=\"urn:ietf:params:xml:ns:metalink\">"
      }
      { gsub(/\x27/,"",$1);
        split($4, chksum, /:/)
        printf "<file name=\"%s\">",$2
        printf "<size>%d</size>", $3
        printf "<hash type=\"%s\">%s</hash>", chksum[1], chksum[2]
        printf "<url priority=\"1\">%s</url>", $1
        print "</file>"
      }
      END {
        print "</metalink>"
      }'|aria2c -M- --file-allocation=none -d /var/cache/apt/archives/
}

###
# usage: error_check <ERROR_MESSAGE> <ERROR_CODE>
# Examples: error_check "The wheels just came off!" 110
#           ERROR_MESSAGE_DEFAULT="[ERROR] mygreatscript error"; error_check "omgomgomg"
#           error_check
#
# If ERROR_MESSAGE_DEFAULT variable is defined, will prefix messages with it.
# Uses passed in string for error message if provided.
# When a string is passed in, you can also pass in a custom error code.
# Error code defaults to 113
#
# Reference: Bash exit code values [http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF]
###
error_check() {
  if [ "$?" -ne 0 ]; then
    local err_value; err_value="$?"
    printf "%s\n" "${ERROR_MESSAGE_DEFAULT-"[ERROR] script command failure"} ${1}" >&2
    exit ${2-113}
  fi
}

###
# usage: json_deepmerge file0 file1 file2 file3 ...
# Examples: json_deepmerge /package/airstack/core/config.json /package/airstack/dropbear/config.json
#           files="/package/airstack/core/config.json /package/airstack/dropbear/config.json /package/airstack/serf/config.json /package/airstack/haproxy/config.json"
#           json_deepmerge $files
#
# Does a recursive deep merge on a list of json files. Posix-shell compatible.
# Dependencies: jq
# Outputs results to stdout
# Reference: http://stackoverflow.com/questions/19529688/how-to-merge-2-json-file-using-jq
###

json_deepmerge() {
  local count; count=0
  local params; params=""
  local tmp_files; tmp_files="$@"
  while [ $#  -gt 0 ]; do
    params="$params.[$count]"
    [ "$#" -gt 1 ] && params=$params" * "
    count=$(( count+1 ));
    shift
  done
  # slurp tmp_files into a big array and multiply them
  jq --slurp "$params" $tmp_files
}

#=====

###
# secret shell scripting reference stuff:
###

# posix shell scripting - http://pubs.opengroup.org/onlinepubs/009604599/utilities/xcu_chap02.html#tag_02_09_04
# http://pubs.opengroup.org/onlinepubs/009604599/utilities/xcu_chap02.html

# posix error codes: (tl;dr users should use exit codes 64-113 only)
# "The author of this document proposes restricting user-defined exit codes to the range 64 - 113 (in addition to 0, for success), to conform with the C/C++ standard. This would allot 50 valid codes, and make troubleshooting scripts more straightforward."
# http://tldp.org/LDP/abs/html/exitcodes.html#EXITCODESREF

# posix shell guide for bash devs.
# http://mywiki.wooledge.org/Bashism
# https://wiki.ubuntu.com/DashAsBinSh

# bash posix mode
# http://www.gnu.org/software/bash/manual/html_node/Bash-POSIX-Mode.html#Bash-POSIX-Mode

# bash references:
# http://www.gnu.org/software/bash/manual/bashref.html

# man vs info
# http://unix.stackexchange.com/questions/77514/what-is-gnu-info-for
