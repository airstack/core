#!/bin/sh
set -e

#
# Usage: pass in a list of services to configure
# Example: service-conf serf haproxy

# add airstack helpers if they exist:
ERROR_MESSAGE_DEFAULT="[ERROR] service-conf -"
[ -f "/package/airstack/core/airstack-helpers" ] && { . /package/airstack/core/airstack-helpers ;} || { printf "missing airstack-helpers. exiting.\n" && exit 113 ;}

###
# Common Initialization/Setup for all services
###
service_common_setup() {
  local service_name; service_name="$1"


  # create runit service dir
  [ -e $BASEDIR/$service_name/ ] || mkdir -p $BASEDIR/$service_name/

  # symlink env directory for service
  ln -sf /env/"$service_name" $BASEDIR/$service_name/env
}


###
# Enable the state command for our services
###
service_state_init() {
  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_STATE' | head -n1)

  # don't do anything if blank
  [ $(cat $cmd_name | wc -m) -gt 1 ] || return 0

  case "$cmd_name" in
    "up") echo "state up";;
    "down") echo "state down";;
    "once") echo "state once";;
    *) echo "error invalid entry" && return 1;;
  esac

  # # create runit service state file
  # local cmdfile; cmd_file=$BASEDIR/$service_name/check
  # echo "#!/bin/sh" > "$cmdfile"
  # echo "exec 2>&1" >> "$cmdfile"
  # cat "$cmd_name" >> "$cmdfile"

  # chmod 750 $cmd_file
  # # core-error-check "log script failure"

  return 0
}

###
# Set up necessary service configs after running the enable var contents.
# Usage: pass in the service name in all lowercase.
###
# run the enable command for a service.
service_enable_pre() {

  # don't do anything if blank
  [ -z "$1" ] && return 0

  local service_name; service_name="$1"

  # if multiple entries, run each numbered command in order
  # otherwise just run the single one.
  local cmd_files;
  cmd_files=$(ls /env/$service_name/*_ENABLE* | sort -n)
  if [ $(printf "%s" "$cmd_files" | wc -w) -gt 1 ]; then
    # multiple
    cmd_run=$(printf "%s\n" "$cmd_files" | tail -n+2)
    set -e
    for i in $cmd_run; do
      chpst -e /env/$service_name/ -u root sh $i
    done
    set +e
  elif [ $(printf "%s" "$cmd_files" | wc -w) -eq 1 ]; then
    # single
    cmd_run=$(printf "%s\n" "$cmd_files" | head -n1)
    chpst -e /env/$service_name/ -u root sh $cmd_run
  else
    echo "no enable script" && return 0
  fi

  # TODO: delete this
  # chpst -e /env/$service_name/ -u root sh $cmd_name
  # error_check "failure in service_enable_pre"

  return 0
}


service_run_init() {
  set -e
  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_RUN' | head -n1)

  # don't do anything if blank
  [ $(cat $cmd_name | wc -m) -gt 1 ] || return 0

  # create runit service file
  local cmd_file; cmd_file="$BASEDIR/$service_name/run"
  echo '#!/bin/sh' > $cmd_file
  echo 'exec 2>&1' >> $cmd_file

  # only add socklog-check if service isn't socklog-unix!
  [ $service_name="socklog-unix" ] || echo "socklog-check || exit 1" >> $cmd_file
  cat $cmd_name >> $cmd_file

  chmod 750 $cmd_file
  # core-error-check "service_run_init error"

  return 0
}

###
# Enable the check command for our services
###
service_check_init() {
  set -e
  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_CHECK' | head -n1)


  # don't do anything if blank
  [ $(cat $cmd_name | wc -m) -gt 1 ] || return 0

  # create runit service check file
  local cmd_file; cmd_file="$BASEDIR/$service_name/check"
  echo '#!/bin/sh' > $cmd_file
  echo 'exec 2>/dev/null' >> $cmd_file
  cat $cmd_name >> $cmd_file

  chmod 755 "$cmd_file"
  # core-error-check "log script failure"

  return 0
}

service_log_init() {
  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_LOG' | head -n1)

  # don't do anything if blank
  [ $(cat $cmd_name | wc -m) -gt 1 ] || return 0

  # create runit service log dir
  [ ! -e "$BASEDIR/$service_name/log/" ] && mkdir -p "$BASEDIR/$service_name/log/"

  # create runit service log file
  local cmd_file; cmd_file="$BASEDIR/$service_name/log/run"
  echo '#!/bin/sh' > $cmd_file
  echo 'exec 2>&1' >> $cmd_file
  cat $cmd_name >> $cmd_file

  chmod 750 "$cmd_file"
  # core-error-check "log script failure"

  return 0
}


###
# Enable the finish command for our services
###
service_finish_init() {
  local service_name; service_name="$1"
  local cmd_name; cmd_name=$(find /env/$service_name/ -name '*_FINISH' | head -n1)


  # don't do anything if blank
  [ $(cat $cmd_name | wc -m) -gt 1 ] || return 0

  # create runit service finish file
  local cmd_file; cmd_file="$BASEDIR/$service_name/finish"
  echo '#!/bin/sh' > $cmd_file
  echo 'exec 2>&1' >> $cmd_file
  cat $cmd_name >> $cmd_file

  chmod 750 $cmd_file
  # core-error-check "log script failure"

  return 0
}


###
# Set up necessary service configs after running the enable, run and log var contents.
###
service_enable_post() {
  local service_name; service_name="$1"
  echo "Enabling $service_name"

  # TODO: hook up runlevels to not hard-code this.
  [ $service_name="socklog-unix" ] && tmp_runlevels="single multi"

  local i;
  for i in ${tmp_runlevels:-multi}; do
    [ ! -e /etc/runit/runsvdir/$i/$service_name ] && ln -sf /etc/sv/$service_name /etc/runit/runsvdir/$i/
  done

  # adding to init.d for service command compatibility
  ln -sf /usr/bin/sv /etc/init.d/"$service_name"
  return 0
}


main() {

  BASEDIR=/etc/sv

  for i in "$@"; do
    service_common_setup $i
    service_enable_pre $i
    service_run_init $i
    service_check_init $i
    service_log_init $i
    service_enable_post $i
  done
}


main "$@"
